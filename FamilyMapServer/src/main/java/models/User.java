package models;


import requests.Register;

import java.util.Objects;
import java.util.UUID;
/**
 * Database model of the User Database Table
 */

public class User {
    /**
     * First name of user
     */
    private String firstName;
     /**
     * Last name of user
     */
    private String lastName;
    /**
     * Unique username of the user
     */
    private String userName;
    /**
     * Unique email of the user (PK)
     */
    private String email;
    /**
     * Password of the user
     */
    private String password;
    /**
     * Gender of the user
     */
    private Character gender;
    /**
     * ID of the user's person generated by the system: should be generated in the dao.
     * Generate using UUID java.
     */
    private String personID;

    public String getPersonID() {
        return personID;
    }

    public void setPersonID(String personID) {
        this.personID = personID;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Character getGender() {
        return gender;
    }

    public void setGender(Character gender) {
        this.gender = gender;
    }

    /**
     * Constructer of User database model in Java
     *
     * @param firstName User's first name
     * @param lastName  User's last name
     * @param userName  User's desired username: primary key: unique
     * @param email     email address associated with user, not necessarily unique.
     * @param password  User's password
     * @param gender    Gender of user ("m" or "f")
     * @param personID The generated person ID of the user's person on the family tree
     */
    public User(String firstName, String lastName, String userName, String email, String password, Character gender, String personID) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.userName = userName;
        this.email = email;
        this.password = password;
        this.gender = gender;
        this.personID = personID;
    }

    public User(Register regReq) {
        this.firstName = regReq.getFirstName();
        this.lastName = regReq.getLastName();
        this.userName = regReq.getUserName();
        this.email = regReq.getEmail();
        this.password = regReq.getPassword();
        this.gender = regReq.getGender();
        this.personID = UUID.randomUUID().toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return firstName.equals(user.firstName) &&
                lastName.equals(user.lastName) &&
                userName.equals(user.userName) &&
                email.equals(user.email) &&
                password.equals(user.password) &&
                gender.equals(user.gender);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, userName, email, password, gender);
    }

}
